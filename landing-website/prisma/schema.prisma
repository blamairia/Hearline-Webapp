generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role                @default(USER)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  firstName          String?
  lastName           String?
  phone              String?
  organization       String?
  organizationId     String?
  position           String?
  city               String?
  wilaya             String?
  address            String?
  accounts           Account[]
  sessions           Session[]
  contactSubmissions ContactSubmission[]
  subscriptions      Subscription[]
  usageRecords       UsageRecord[]
  paymentMethods     PaymentMethod[]
  activityLogs       ActivityLog[]
  invoices           Invoice[]
  notifications      SystemNotification[]
  organizationRel    Organization?       @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String         @unique
  displayName   String
  description   String?
  price         Decimal        @db.Money
  currency      String         @default("DZD")
  billingCycle  BillingCycle
  isActive      Boolean        @default(true)
  isPopular     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  features      Json
  sortOrder     Int            @default(0)
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id              String              @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus  @default(TRIAL)
  startDate       DateTime
  endDate         DateTime?
  billingCycle    BillingCycle
  autoRenew       Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  trialStartDate  DateTime?
  trialEndDate    DateTime?
  isTrialUsed     Boolean             @default(false)
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  paymentMethod   String?
  addons          SubscriptionAddon[]
  plan            SubscriptionPlan    @relation(fields: [planId], references: [id])
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords    UsageRecord[]
  invoices        Invoice[]

  @@map("subscriptions")
}

model Addon {
  id                 String              @id @default(cuid())
  name               String              @unique
  displayName        String
  description        String?
  price              Decimal             @db.Money
  currency           String              @default("DZD")
  type               AddonType
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  config             Json?
  subscriptionAddons SubscriptionAddon[]

  @@map("addons")
}

model SubscriptionAddon {
  id             String       @id @default(cuid())
  subscriptionId String
  addonId        String
  quantity       Int          @default(1)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  addon          Addon        @relation(fields: [addonId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, addonId])
  @@map("subscription_addons")
}

model UsageRecord {
  id             String       @id @default(cuid())
  userId         String
  subscriptionId String
  featureType    FeatureType
  usage          Int          @default(1)
  metadata       Json?
  recordDate     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, featureType, recordDate])
  @@index([subscriptionId, featureType, recordDate])
  @@map("usage_records")
}

model ContactSubmission {
  id           String           @id @default(cuid())
  name         String
  email        String
  phone        String?
  organization String?
  subject      String
  message      String
  type         ContactType      @default(GENERAL)
  status       SubmissionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String?
  user         User?            @relation(fields: [userId], references: [id])

  @@map("contact_submissions")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  preferences    Json?

  @@map("newsletter_subscriptions")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  wilaya      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("organizations")
}

model PaymentMethod {
  id             String              @id @default(cuid())
  userId         String
  type           PaymentMethodType
  provider       String              // "stripe", "ccp", "bank_transfer"
  providerCardId String?             // External payment provider's card/method ID
  last4          String?             // Last 4 digits for cards
  brand          String?             // "visa", "mastercard", etc.
  expiryMonth    Int?
  expiryYear     Int?
  holderName     String?
  bankName       String?             // For bank transfers
  accountNumber  String?             // For CCP or bank accounts
  isDefault      Boolean             @default(false)
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices       Invoice[]

  @@map("payment_methods")
}

model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  entityType  String       // "subscription", "addon", "payment", "user"
  entityId    String?      // ID of the related entity
  action      ActivityType
  description String
  metadata    Json?        // Additional context data
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action, createdAt])
  @@map("activity_logs")
}

model Invoice {
  id              String        @id @default(cuid())
  userId          String
  subscriptionId  String?
  paymentMethodId String?
  invoiceNumber   String        @unique
  amount          Decimal       @db.Money
  currency        String        @default("DZD")
  status          InvoiceStatus @default(PENDING)
  dueDate         DateTime
  paidAt          DateTime?
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@map("invoices")
}

model SystemNotification {
  id          String             @id @default(cuid())
  userId      String?            // null for system-wide notifications
  type        NotificationType
  title       String
  message     String
  isRead      Boolean            @default(false)
  priority    NotificationPriority @default(NORMAL)
  expiresAt   DateTime?
  metadata    Json?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@index([type, createdAt])
  @@map("system_notifications")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  @@index([email])
}

model ContactInquiry {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  email             String
  phone             String?
  organizationName  String?
  organizationType  OrganizationType?
  subject           String
  message           String
  status            ContactStatus     @default(PENDING)
  priority          ContactPriority   @default(NORMAL)
  assignedTo        String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum AddonType {
  FEATURE
  USAGE
  INTEGRATION
  SUPPORT
}

enum FeatureType {
  PATIENT_CREATION
  ECG_ANALYSIS
  PRESCRIPTION_CREATION
  VISIT_CREATION
  API_CALL
  REPORT_GENERATION
  DATA_EXPORT
}

enum ContactType {
  GENERAL
  DEMO_REQUEST
  SALES
  SUPPORT
  PARTNERSHIP
  PRESS
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CCP_ACCOUNT
  PAYPAL
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_RENEWED
  ADDON_ADDED
  ADDON_REMOVED
  ADDON_UPDATED
  PAYMENT_SUCCESSFUL
  PAYMENT_FAILED
  INVOICE_CREATED
  INVOICE_PAID
  PROFILE_UPDATED
  PASSWORD_CHANGED
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  PAYMENT_METHOD_ADDED
  PAYMENT_METHOD_REMOVED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum NotificationType {
  SYSTEM
  BILLING
  SUBSCRIPTION
  FEATURE
  SECURITY
  ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum OrganizationType {
  HOSPITAL
  CLINIC
  MEDICAL_CENTER
  RESEARCH_INSTITUTION
  PRIVATE_PRACTICE
  GOVERNMENT_HEALTH
  OTHER
}
