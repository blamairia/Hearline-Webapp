generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role                @default(USER)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  firstName          String?
  lastName           String?
  phone              String?
  organization       String?
  position           String?
  city               String?
  wilaya             String?
  address            String?
  accounts           Account[]
  sessions           Session[]
  contactSubmissions ContactSubmission[]
  subscriptions      Subscription[]
  usageRecords       UsageRecord[]

  @@map("users")
}

model SubscriptionPlan {
  id            String         @id @default(cuid())
  name          String         @unique
  displayName   String
  description   String?
  price         Decimal        @db.Money
  currency      String         @default("DZD")
  billingCycle  BillingCycle
  isActive      Boolean        @default(true)
  isPopular     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  features      Json
  sortOrder     Int            @default(0)
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id              String              @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus  @default(TRIAL)
  startDate       DateTime
  endDate         DateTime?
  billingCycle    BillingCycle
  autoRenew       Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  trialStartDate  DateTime?
  trialEndDate    DateTime?
  isTrialUsed     Boolean             @default(false)
  lastPaymentDate DateTime?
  nextPaymentDate DateTime?
  paymentMethod   String?
  addons          SubscriptionAddon[]
  plan            SubscriptionPlan    @relation(fields: [planId], references: [id])
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageRecords    UsageRecord[]

  @@map("subscriptions")
}

model Addon {
  id                 String              @id @default(cuid())
  name               String              @unique
  displayName        String
  description        String?
  price              Decimal             @db.Money
  currency           String              @default("DZD")
  type               AddonType
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  config             Json?
  subscriptionAddons SubscriptionAddon[]

  @@map("addons")
}

model SubscriptionAddon {
  id             String       @id @default(cuid())
  subscriptionId String
  addonId        String
  quantity       Int          @default(1)
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  addon          Addon        @relation(fields: [addonId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([subscriptionId, addonId])
  @@map("subscription_addons")
}

model UsageRecord {
  id             String       @id @default(cuid())
  userId         String
  subscriptionId String
  featureType    FeatureType
  usage          Int          @default(1)
  metadata       Json?
  recordDate     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, featureType, recordDate])
  @@index([subscriptionId, featureType, recordDate])
  @@map("usage_records")
}

model ContactSubmission {
  id           String           @id @default(cuid())
  name         String
  email        String
  phone        String?
  organization String?
  subject      String
  message      String
  type         ContactType      @default(GENERAL)
  status       SubmissionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String?
  user         User?            @relation(fields: [userId], references: [id])

  @@map("contact_submissions")
}

model NewsletterSubscription {
  id             String    @id @default(cuid())
  email          String    @unique
  isActive       Boolean   @default(true)
  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?
  preferences    Json?

  @@map("newsletter_subscriptions")
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

enum AddonType {
  FEATURE
  USAGE
  INTEGRATION
  SUPPORT
}

enum FeatureType {
  PATIENT_CREATION
  ECG_ANALYSIS
  PRESCRIPTION_CREATION
  VISIT_CREATION
  API_CALL
  REPORT_GENERATION
  DATA_EXPORT
}

enum ContactType {
  GENERAL
  DEMO_REQUEST
  SALES
  SUPPORT
  PARTNERSHIP
  PRESS
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
